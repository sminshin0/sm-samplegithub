name: 'Infrastructure Setup'

on:
  push:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  workflow_dispatch:
    inputs:
      deploy_eks:
        description: 'Deploy EKS cluster (expensive)'
        required: false
        default: 'false'
        type: boolean

env:
  AWS_REGION: 'us-east-2'
  PROJECT_NAME: 'github-actions-terraform'
  INSTANCE_TYPE: 't3.micro'
  ENVIRONMENT: 'production'

jobs:
  # 1단계: 기본 인프라 (EC2, ECR)
  basic-infrastructure:
    name: 'Deploy Basic Infrastructure'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.7'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create ECR Repository
      run: |
        # ECR 리포지토리 생성 (Terraform 외부에서)
        if ! aws ecr describe-repositories --repository-names ${{ env.PROJECT_NAME }}-app --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "📦 ECR 리포지토리 생성 중..."
          aws ecr create-repository \
            --repository-name ${{ env.PROJECT_NAME }}-app \
            --image-scanning-configuration scanOnPush=true \
            --region ${{ env.AWS_REGION }}
          echo "✅ ECR 리포지토리 생성 완료"
        else
          echo "✅ ECR 리포지토리가 이미 존재합니다"
        fi

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -input=false -reconfigure

    - name: Create terraform.tfvars
      run: |
        cd terraform
        cat > terraform.tfvars << EOF
        aws_region    = "${{ env.AWS_REGION }}"
        project_name  = "${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}"
        instance_type = "${{ env.INSTANCE_TYPE }}"
        environment   = "${{ env.ENVIRONMENT }}"
        EOF

    - name: Terraform Plan (Basic)
      run: |
        cd terraform
        # EKS 관련 파일 임시 제외
        if [ "${{ inputs.deploy_eks }}" != "true" ]; then
          mv eks.tf eks.tf.bak || true
          mv eks-iam.tf eks-iam.tf.bak || true
        fi
        terraform plan -no-color

    - name: Terraform Apply (Basic)
      run: |
        cd terraform
        terraform apply -auto-approve
        echo "✅ 기본 인프라 배포 완료"

    - name: Output Results
      run: |
        cd terraform
        echo "🎉 배포 결과:"
        terraform output
        
        # ECR URI 출력
        ECR_URI=$(aws ecr describe-repositories --repository-names ${{ env.PROJECT_NAME }}-app --query 'repositories[0].repositoryUri' --output text)
        echo "📦 ECR URI: $ECR_URI"

  # 2단계: EKS 배포 (선택사항)
  eks-infrastructure:
    name: 'Deploy EKS (Optional)'
    runs-on: ubuntu-latest
    needs: basic-infrastructure
    if: inputs.deploy_eks == 'true'
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.7'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy EKS
      run: |
        cd terraform
        terraform init -input=false -reconfigure
        
        # EKS 파일 복원
        mv eks.tf.bak eks.tf || true
        mv eks-iam.tf.bak eks-iam.tf || true
        
        # tfvars 재생성
        cat > terraform.tfvars << EOF
        aws_region    = "${{ env.AWS_REGION }}"
        project_name  = "${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}"
        instance_type = "${{ env.INSTANCE_TYPE }}"
        environment   = "${{ env.ENVIRONMENT }}"
        EOF
        
        terraform plan -no-color
        terraform apply -auto-approve
        
        echo "✅ EKS 클러스터 배포 완료"
        echo "⏰ 클러스터 준비까지 15-20분 소요됩니다"