name: 'Terraform Deploy (Development)'

# 개발 환경용 워크플로우
on:
  pull_request:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy infrastructure after testing'
        required: false
        default: 'true'
        type: boolean

env:
  AWS_REGION: 'us-east-2'
  PROJECT_NAME: 'github-actions-terraform'
  INSTANCE_TYPE: 't3.micro'
  ENVIRONMENT: 'development'

jobs:
  terraform-dev:
    name: 'Terraform Development'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.7'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create terraform.tfvars for development
      run: |
        cd terraform
        cat > terraform.tfvars << EOF
        aws_region    = "${{ env.AWS_REGION }}"
        project_name  = "${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-pr${{ github.event.number || 'manual' }}"
        instance_type = "${{ env.INSTANCE_TYPE }}"
        EOF
        echo "🧪 개발 환경 설정 생성 완료"
        echo "📋 고정 S3 Backend: terraform-state-0ss4kx0a"
        cat terraform.tfvars

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -input=false

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        cd terraform
        terraform plan -no-color -out=tfplan

    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### 🧪 Development Terraform Plan
          
          <details><summary>Show Plan</summary>
          
          \`\`\`
          Plan completed successfully!
          \`\`\`
          
          </details>
          
          *Environment: ${{ env.ENVIRONMENT }}*
          *Instance Type: ${{ env.INSTANCE_TYPE }}*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply (Test)
      run: |
        cd terraform
        echo "🧪 테스트용 인프라 배포..."
        terraform apply -auto-approve tfplan

    - name: Test Infrastructure
      run: |
        cd terraform
        echo "🔍 인프라 테스트 중..."
        WEBSITE_URL=$(terraform output -raw website_url)
        echo "테스트 URL: $WEBSITE_URL"
        
        # 간단한 헬스체크
        sleep 30  # 인스턴스 부팅 대기
        if curl -f "$WEBSITE_URL" > /dev/null 2>&1; then
          echo "✅ 웹사이트 정상 동작"
        else
          echo "❌ 웹사이트 접속 실패"
        fi

    - name: Terraform Destroy (Cleanup)
      if: always() && (inputs.destroy == true || inputs.destroy == null)
      run: |
        cd terraform
        echo "🧹 테스트 인프라 정리 중..."
        terraform destroy -auto-approve
        echo "✅ 정리 완료"